syntax = "proto3";

package fuck_web.service.models;

import public "gogoproto/gogo.proto";

option go_package = "github.com/MicroOps-cn/fuck-web/pkg/service/models;models";

message AuthMeta {
  // @sync-to-public:public/src/services/fuck-web/enums.ts:AuthMethod
  enum Method {
    basic = 0;
    signature = 1;
    token = 2;
    token_signature = 3;
  };
}

message RoleMeta {
  // @sync-to-public:public/src/services/fuck-web/enums.ts:RoleType
  enum Type {
    user = 0;
    system = 1;
  }
}

message UserMeta {
  // @sync-to-public:public/src/services/fuck-web/enums.ts:UserStatus
  enum UserStatus {
    normal = 0;
    disabled = 1;
    user_inactive = 2;
    password_expired = 4;
  }
}

message Model {
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_sizecache) = false;
  option (gogoproto.goproto_unkeyed) = false;

  string id = 1 [(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required" gorm:"primary_key;type:char(36)"'];
  string create_time = 2 [(gogoproto.jsontag) = "createTime,omitempty", (gogoproto.customtype) = "time.Time", (gogoproto.nullable) = false, (gogoproto.moretags) = 'gorm:"type:datetime;not null;omitempty"'];
  string update_time = 3 [(gogoproto.jsontag) = "updateTime,omitempty", (gogoproto.customtype) = "time.Time", (gogoproto.nullable) = false, (gogoproto.moretags) = 'gorm:"type:datetime;not null;omitempty"'];
  bool is_delete = 4 [(gogoproto.jsontag) = "isDelete,omitempty", (gogoproto.moretags) = 'gorm:"-"'];
  string delete_time = 5[(gogoproto.jsontag) = "-", (gogoproto.nullable) = false, (gogoproto.customtype) = "gorm.io/gorm.DeletedAt", (gogoproto.moretags) = 'gorm:"type:datetime;omitempty"'];
}